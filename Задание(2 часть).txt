Взять за основу результат 7 домашней работы

1) Мобильное меню навигации:
    1) В index.html добавить в <header>:
        Тот контент, который был до этого, обернуть в <div> с классом -desktop
        Добавить рядом, сестринский <div>, с классом -mobile
    2) В стилях добавить, чтобы для ширины экрана больше 768px скрывался .-mobile, для ширины меньше 768px скрывался .desktop
    3) Добавить в div.-desktop ваш Логотип перед меню навигации
    4) Добавить в div.-mobile ваш Логотип  и иконку для открытия мобильного меню
    5) В <body>, последним элементом, после всего остального контента добавить следующее:
        <div> с классом "navigation-menu -mobile"
        Продублируйте там <nav> из <header>, чтобы он содержал ссылки навигации
        
            Для этого <nav> добавьте следующие стили:
                Ширина 80% от ширины экрана
                Цвет фона - добавить на свой вкус, как правило тот же, что у цвета фона страницы
                Убрать стиль списков, чтобы не было точек перед элементами списка
                Использовать flexbox, чтобы ссылки шли в один столбик
                Отступ между ссылками 5px

            Для экрана ширины меньше 768px, .navigation-menu должно иметь следующие стили:
                Ширина 100% от ширины экрана
                Высота 100% от высоты экрана
                Цвет фона - rgba(0, 0, 0, 0.5)
                Позиция фиксированная
                Отступ от верхнего края экрана - 0px
                Отступ от правого края экрана - 100%
                (Получается элемент находится за экраном, нам не виден)
                Добавить transition для свойства "Отступ от правого края экрана" (время анимации выберите на свой вкус)

            Добавить стили для .navigation-menu.active стили:
                Отступ от правого края экрана - 0%

            Добавить для navigation-menu псевдоэлемент ::after, со следующими стилями
                content: '', чтобы он появился
                Позиция абсолютная
                Отступ сверху 5px
                Отступ справа 5px
                Ширина 20px
                Высота 20px
                Фон (его подсвойства):
                    Картинка - ссылку на иконку крестика для закрытия
                    Повторение - не повторять
                    Размер (Ширина Высота) - 20px 20px
                    Позиция - центр центр
                    

    6) Добавить JS (Использовать jQuery):
        Сохранить следующие селекторы следующих элементов в переменные:
            Иконка для открытия мобильного меню
            div.navigation-menu

        При клике по иконке - добавить класс .active для .navigation-menu
        При клике по .navigation-menu - убрать класс .active для .navigation-menu (Клик по полупрозрачной части меню, и по крестику ::after)


    7) Создаём табулятор для раздела "Наши услуги"
        В index.html, для секции, посвященной услугам - добавим код по шаблону:
            <div class="content">
                <h2>Услуги</h2>
                <div class="tabs-widget">
                    <div class="tabs-list"></div>
                    <div class="tabs-wrapper">
                        <div class="tabs-content" data-tab-title="Услуга 1">
                            <h3>
                                Услуга 1
                            </h3>
                            <p>Lorem...</p>
                        </div>
                    </div>
                </div>
            </div>

            Элементов "tabs-content" - создаём столько, сколько будет услуг

            Далее, пишем JS код:
            1) Помещаем "tabs-widget" в переменную tabs
            2) Объявляем массив, в котором будем хранить имена вкладок
            3) Сохраняем все имена вкладок в массив (ищем по атрибуту data-tab-title)
            4) В элементе "tabs-list" - создаём <ul>
            5) Внутри <ul> создаём столько <li>, сколько у нас получилось имён в массиве
                Каждый <li> содержит внутри себя <span> с соответствующим именем услуги
            6) Первому элементу "tabs-content" - добавляется класс active
            7) Добавляем обработчик событий, который при наведении мышки на элементы <li> происходит следующее:
                1) У всех "tabs-content" и всех <li> - убирается класс active
                2) У элемента "tabs-content", у которого индекс такой же, как индекс текущего элемента <li> - добавляется класс active
                3) У текущего <li> появляется класс active
            
            Идём в стили, добавляем следующее:
                tabs-content не отображаются на странице
                tabs-content.active - отображаются (как block, flex или grid - на ваш выбор)
                
                Список в tabs-list:
                    Использовать flexbox, чтобы ссылки шли в одну строку
                    Добавить для них цвет фона и/или шрифта
                    Для <li> с классом active - цвета/шрифт отличается, чтобы визуально было видно, какая вкладка сейчас открыта

    8) Переписать написанный ранее код используя jQuery






Для игры Space Invaders:

1) #player - должен быть абсолютно позиционирован. С небольшим отступом от нижнего края экрана
2) Добавьте обработчик событий для game-screen, который будет реагировать на "движение мышки"
    Обработчик этого события, функция movePlayer, должна считывать координаты мышки, и её координаты по горизонтали должны присваиваться свойству left для #player
    Персонаж должен двигаться так, что его центр находится там, где находится мышка.
    При этом, он не должен уходить за левый и правый край экрана. Если мышка слишком близко к краю - персонаж должен там останавливаться.
3) В #enemies-wrapper - добавить и застилить (можно пока разноцветные квадраты, если вы ещё не подобрали спрайт) 4 вида врагов.
    <div class="enemy enemy-№" data-type="№"></div>
    Где № - это вид врага
4)  Добавьте обработчик событий для game-screen, который будет реагировать на "клик мышкой"
    1) Создайте глобальную переменную playerCooldown. Изначальное значение - false. Эта переменная будет отвечать за перезарядку оружия игрока.
    2) Создайте функцию для обработки кликов, которая будет считывать координаты персонажа игрока в момент клика
    Что-то вроде playerShoot
    Создавать элемент <div class="bullet player-bullet"></div>
    Этот элемент будет добавляться в game-screen
    Этот элемент в CSS должен быть абсолютно позиционирован. Задайте ему размеры, цвет, форму и т.д.
    3) Добавить с помощью JS этому элементу CSS свойства top и left, так, чтобы он появился ровно над персонажем игрока, по его центру
    4) playerCooldown значение становиться true. Создаётся setTimeout функция, на, допустим, 1 секунду, и через секунду playerCooldown должен снова меняться на false
    5) Оборачиваем весь код этой функции в условие if, если playerCooldown - тогда ничего не делать, если же нет - тогда она работает (после этого, стрелять можно будет не чаще чем раз в секунду)
    (Позже, возможно, по вашему желанию, заменим это на вариант, как это в настоящем Space Invaders, что на экране может быть за раз всего лишь 1 пуля игрока)
5) Добавить функцию bulletFly. Эта функция будет принимать в качестве аргумента .bullet
    В функции playerShoot эта функция будет сразу вызываться с только что созданным элементом
    Эта функция будет считывать текущее top этой пули, поднимать её вверх, на столько же пикселей, какой размер этой пули.
    После этого должна производиться проверка, возможно пуля пересекается с координатами одного из врагов. Если так - вызывать функцию killEnemy
    Если не было никаких пересечений, создать setTimeout, который через 15 миллисекунд снова вызовет эту функцию с этим же аргументом
6) Добавить функцию killEnemy, которая принимает в качестве аргументов - пулю и врага.
    Создать глобальную переменную playerScores
    1) Пуля должна быть удалена
    2) В playerScores должны прибавиться очки за убитого врага. Пока что просто прибавляем столько, какой у него №
    3) Враг должен удаляться
    4) После этого должна вызываться функция checkEnemies
7) Создать функцию checkEnemies, которая проверяет остались ли ещё враги
    Создать глобальную переменную currentLevel, которая будет хранить информацию о номере текущего уровня
    1) Если не осталось - вызвать функцию createEnemies, которая создаёт новую волну врагов
    2) Увеличить значение currentLevel на 1, если он меньше 11. Приравнять 1, если он был 11
